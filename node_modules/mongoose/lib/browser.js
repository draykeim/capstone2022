/* eslint-env browser */

'use strict';

require('./driver').set(require('./drivers/browser'));

const DocumentProvider = require('./document_provider.js');
const PromiseProvider = require('./promise_provider');

DocumentProvider.setBrowser(true);

/**
 * The Mongoose [Promise](#promise_Promise) constructor.
 *
 * @method Promise
 * @api public
 */

Object.defineProperty(exports, 'Promise', {
  get: function() {
    return PromiseProvider.get();
  },
  set: function(lib) {
    PromiseProvider.set(lib);
  }
});

/**
 * Storage layer for mongoose promises
 *
 * @method PromiseProvider
 * @api public
 */

exports.PromiseProvider = PromiseProvider;

/**
 * The [MongooseError](#error_MongooseError) constructor.
 *
 * @method Error
 * @api public
 */

<<<<<<< HEAD
exports.Error = require('./error');
=======
exports.Error = require('./error/index');
>>>>>>> f48a1595ee4da78cea13c4049a9ef48e9e70b5fa

/**
 * The Mongoose [Schema](#schema_Schema) constructor
 *
 * ####Example:
 *
<<<<<<< HEAD
 *     var mongoose = require('mongoose');
 *     var Schema = mongoose.Schema;
 *     var CatSchema = new Schema(..);
=======
 *     const mongoose = require('mongoose');
 *     const Schema = mongoose.Schema;
 *     const CatSchema = new Schema(..);
>>>>>>> f48a1595ee4da78cea13c4049a9ef48e9e70b5fa
 *
 * @method Schema
 * @api public
 */

exports.Schema = require('./schema');

/**
 * The various Mongoose Types.
 *
 * ####Example:
 *
<<<<<<< HEAD
 *     var mongoose = require('mongoose');
 *     var array = mongoose.Types.Array;
=======
 *     const mongoose = require('mongoose');
 *     const array = mongoose.Types.Array;
>>>>>>> f48a1595ee4da78cea13c4049a9ef48e9e70b5fa
 *
 * ####Types:
 *
 * - [ObjectId](#types-objectid-js)
 * - [Buffer](#types-buffer-js)
 * - [SubDocument](#types-embedded-js)
 * - [Array](#types-array-js)
 * - [DocumentArray](#types-documentarray-js)
 *
 * Using this exposed access to the `ObjectId` type, we can construct ids on demand.
 *
<<<<<<< HEAD
 *     var ObjectId = mongoose.Types.ObjectId;
 *     var id1 = new ObjectId;
=======
 *     const ObjectId = mongoose.Types.ObjectId;
 *     const id1 = new ObjectId;
>>>>>>> f48a1595ee4da78cea13c4049a9ef48e9e70b5fa
 *
 * @property Types
 * @api public
 */
exports.Types = require('./types');

/**
 * The Mongoose [VirtualType](#virtualtype_VirtualType) constructor
 *
 * @method VirtualType
 * @api public
 */
exports.VirtualType = require('./virtualtype');

/**
 * The various Mongoose SchemaTypes.
 *
 * ####Note:
 *
 * _Alias of mongoose.Schema.Types for backwards compatibility._
 *
 * @property SchemaTypes
 * @see Schema.SchemaTypes #schema_Schema.Types
 * @api public
 */

exports.SchemaType = require('./schematype.js');

/**
 * Internal utils
 *
 * @property utils
 * @api private
 */

exports.utils = require('./utils.js');

/**
<<<<<<< HEAD
 * The Mongoose browser [Document](#document-js) constructor.
=======
 * The Mongoose browser [Document](/api/document.html) constructor.
>>>>>>> f48a1595ee4da78cea13c4049a9ef48e9e70b5fa
 *
 * @method Document
 * @api public
 */
exports.Document = DocumentProvider();

/**
<<<<<<< HEAD
 * function stub for model
 *
 * @method model
 * @api public
 * @return null
 */
exports.model = function() {
  return null;
=======
 * Return a new browser model. In the browser, a model is just
 * a simplified document with a schema - it does **not** have
 * functions like `findOne()`, etc.
 *
 * @method model
 * @api public
 * @param {String} name
 * @param {Schema} schema
 * @return Class
 */
exports.model = function(name, schema) {
  class Model extends exports.Document {
    constructor(obj, fields) {
      super(obj, schema, fields);
    }
  }
  Model.modelName = name;

  return Model;
>>>>>>> f48a1595ee4da78cea13c4049a9ef48e9e70b5fa
};

/*!
 * Module exports.
 */

if (typeof window !== 'undefined') {
  window.mongoose = module.exports;
  window.Buffer = Buffer;
}
